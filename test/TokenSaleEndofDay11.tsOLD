import { expect } from "chai";
import { viem } from "hardhat";
import { parseEther, formatEther } from "viem";
import { loadFixture } from "@nomicfoundation/hardhat-network-helpers";

const TEST_RATIO = 10n;
const TEST_PRICE = 5n;
// const TEST_BUY_AMOUNT = 10n;
const TEST_BUY_AMOUNT = "10"; // to use with parseEther

async function fixture() {
  const publicClient = await viem.getPublicClient();
  const [deployer, acc1, acc2] = await viem.getWalletClients();
  console.log("Deployer address = ", deployer.account.address);
  console.log("Acc1 address = ", acc1.account.address);
  console.log("Acc2 address = ", acc2.account.address);

  const myTokenContract = await viem.deployContract("MyToken", []);

  console.log("myTokenContract address = ", myTokenContract.address);

  const tokenSaleContract = await viem.deployContract("TokenSale", [
    TEST_RATIO,
    TEST_PRICE,
    // "0x0000000000000000000000000000000000000000",
    myTokenContract.address,
    "0x0000000000000000000000000000000000000000",
  ]);
  console.log("tokenSaleContract address = ", tokenSaleContract.address);
  const MINTER_ROLE = await myTokenContract.read.MINTER_ROLE(); // read the minter role

  // giving role to deployer will not work as  its the TokenSaleContract that needs the access as it mints
  // const giveRoleTx = await myTokenContract.write.grantRole([
  //   MINTER_ROLE,
  //   deployer.account.address,
  // ]);
  const giveRoleTx = await myTokenContract.write.grantRole([
    MINTER_ROLE,
    tokenSaleContract.address,
  ]);
  return {
    tokenSaleContract,
    myTokenContract, // added next day on 3/27/24 - Day 11;
    deployer,
    acc1,
    publicClient,
  };
}

describe("NFT Shop", async () => {
  describe("When the Shop contract is deployed", async () => {
    it("defines the ratio as provided in parameters", async () => {
      // const tokenSaleContract = await viem.deployContract("TokenSale", [
      //   TEST_RATIO,
      //   TEST_PRICE,
      // ]);
      const { tokenSaleContract } = await loadFixture(fixture);
      const ratio = await tokenSaleContract.read.ratio();
      expect(ratio).to.be.eq(TEST_RATIO);
      // throw new Error("Not implemented");
      // TO DO expect
    });
    it("defines the price as provided in parameters", async () => {
      // const tokenSaleContract = await viem.deployContract("TokenSale", [
      //   TEST_RATIO,
      //   TEST_PRICE,
      // ]);
      const { tokenSaleContract } = await loadFixture(fixture);
      const price = await tokenSaleContract.read.price();
      expect(price).to.be.eq(TEST_PRICE);
      // throw new Error("Not implemented");
    });
    it("uses a valid ERC20 as payment token", async () => {
      const { tokenSaleContract } = await loadFixture(fixture);
      const paymentTokenAddress = await tokenSaleContract.read.paymentToken(); // this is public so i can read the paymentToken address
      const paymentToken = await viem.getContractAt(
        "IERC20",
        paymentTokenAddress
      ); // now that you have address you get the contract
      // this payment token MyToken is ERC20 i can read totalSupply() function

      // instead of below lines we do be.not.rejected
      // const totalSupply = await paymentToken.read.totalSupply();
      // console.log("total supply read from MyToken = ", totalSupply);
      // expect(totalSupply).to.be.gte(0);

      await expect(paymentToken.read.totalSupply()).to.be.not.rejected;

      // throw new Error("Not implemented");
    });
    it("uses a valid ERC721 as NFT collection", async () => {
      throw new Error("Not implemented");
    });
  });

  describe("When a user buys an ERC20 from the Token contract", async () => {
    it("charges the correct amount of ETH", async () => {
      const { tokenSaleContract, publicClient, deployer, acc1 } =
        await loadFixture(fixture);
      const ethBalanceBefore = await publicClient.getBalance({
        address: acc1.account.address,
      });
      // To do - call a function passing eth
      const tx = await tokenSaleContract.write.buyTokens({
        value: parseEther(TEST_BUY_AMOUNT),
        account: acc1.account,
      });
      const txReceipt = await publicClient.getTransactionReceipt({ hash: tx });
      const gasAmount = txReceipt.gasUsed;
      const gasprice = txReceipt.effectiveGasPrice;
      const txFees = gasAmount * gasprice;
      const ethBalanceAfter = await publicClient.getBalance({
        address: acc1.account.address,
      });
      const diff = ethBalanceBefore - ethBalanceAfter; // Since we spent ETH here
      expect(diff).to.be.eq(parseEther(TEST_BUY_AMOUNT) + txFees);

      throw new Error("Not implemented");
    });
    it("gives the correct amount of tokens", async () => {
      const { tokenSaleContract, myTokenContract, deployer, acc1 } =
        await loadFixture(fixture);
      const tokenBalanceBefore = await myTokenContract.read.balanceOf([
        acc1.account.address,
      ]);
      // To do - call a function passing eth
      const tx = await tokenSaleContract.write.buyTokens({
        value: parseEther(TEST_BUY_AMOUNT),
        account: acc1.account,
      });
      const tokenBalanceAfter = await myTokenContract.read.balanceOf([
        acc1.account.address,
      ]);
      const diff = tokenBalanceAfter - tokenBalanceBefore;
      expect(diff).to.be.eq(parseEther(TEST_BUY_AMOUNT) * TEST_RATIO);
      // throw new Error("Not implemented");
    });
  });
  describe("When a user burns an ERC20 at the Shop contract", async () => {
    it("gives the correct amount of ETH", async () => {
      // Step 1- call the TokenContract to Approve AMOUNT to the TokenSaleContract
      // Step 2 - call the tokenSaleContract to burn the tokens - returnTokens function
      // Step 3 - Check the ETH balance of User for tokens - will increase
      throw new Error("Not implemented");
    });
    it("burns the correct amount of tokens", async () => {
      // Step 1- call the TokenContract to Approve AMOUNT to the TokenSaleContract
      // Step 2 - call the tokenSaleContract to burn the tokens - returnTokens function
      // Step 3 - Check the token balance of User for tokens - will decrease
      throw new Error("Not implemented");
    });
  });
  describe("When a user buys an NFT from the Shop contract", async () => {
    it("charges the correct amount of ERC20 tokens", async () => {
      throw new Error("Not implemented");
    });
    it("gives the correct NFT", async () => {
      throw new Error("Not implemented");
    });
  });
  describe("When a user burns their NFT at the Shop contract", async () => {
    it("gives the correct amount of ERC20 tokens", async () => {
      throw new Error("Not implemented");
    });
  });
  describe("When the owner withdraws from the Shop contract", async () => {
    it("recovers the right amount of ERC20 tokens", async () => {
      throw new Error("Not implemented");
    });
    it("updates the owner pool account correctly", async () => {
      throw new Error("Not implemented");
    });
  });
});
