// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

// import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
// import "@openzeppelin/contracts/access/AccessControl.sol";
import {MyToken} from "./MyToken.sol";
import {MyNFT} from "./MyNFT.sol";


contract TokenSale {
    uint256 public ratio;
    uint256 public price;
    MyToken public paymentToken;
    MyNFT public nftCollection;
    
    // constructor(uint256 _ratio, uint256 _price){
    //     ratio = _ratio;
    //     price = _price;
    //     paymentToken = address(new myToken());
    // }

    constructor(uint256 _ratio, uint256 _price, MyToken _paymentToken, MyNFT _nftCollection){
        ratio = _ratio;
        price = _price;
        // paymentToken = address(new myToken());
        paymentToken = _paymentToken;
        nftCollection = _nftCollection;
    
    }
    function buyTokens() external payable {
        // uint tokensToBeMinted = msg.value * ratio;   // first step we do this just to test Eth being sent to contract but will mint later
        paymentToken.mint(msg.sender, msg.value * ratio);
    }

    function returnTokens(uint256 amount) external {
        paymentToken.burnFrom(msg.sender, amount);
        payable(msg.sender).transfer(amount / ratio);
    }

}